Assignment 1 (Module 2)
Exercise 1: 
Write a function named destructureExample that takes in an object and an array as parameters. The function should use destructuring to extract the values 'name' and 'age' from the object and the values at index 0 and index 2 from the array. The function should then return an object with the extracted values as properties with name and age.

Solution of Exercise 1:

function destructureExample(person, hobbies) {
    const { name, age } = person;
    const [Hobby1, , Hobby2] = hobbies;
    
    return { name, age, Hobby1, Hobby2 };
  }
  
  const person = {
    name: 'John Doe',
    age: 30
  };
  
  const hobbies = ['Reading', 'Painting', 'Cycling', 'Cooking'];
  
  const result = destructureExample(person, hobbies);
  console.log(result);

//====== Result in Terminal:
//{ name: 'John Doe', age: 30, Hobby1: 'Reading', Hobby2: 'Cycling' }
//=====================================================================================

Exercise 2:
Write a function named sumNumbers that takes in multiple numbers as arguments using the rest operator. The function should return the sum of all the numbers.

Solution of Exercise 2:

function sumNum(...numbers) {
        return numbers.reduce( (sum, number) => sum + number ) 
    }
    const result = sumNum(15, 20, 35)
    console.log("Sum of 15, 20, 35 = " + result )
     

//====== Result in Terminal:
//Sum of 15, 20, 35 = 70  
//=====================================================================================

Exercise 3:
Write a function named createGreeting that takes in a name as a parameter and returns a greeting message using template literals. The message should be in the format: "Hello, [name]! Welcome to our website."

Solution of Exercise 3:

function createGreeting(name) {
    return `Hello, ${name}! Welcome to our website.`;
  }
    const userName = "Ostad";
  const showMsg = createGreeting(userName);
  console.log(showMsg)

//====== Result in Terminal:
//Hello, Ostad! Welcome to our website.
//=====================================================================================

Exercise 4: 
Write a function named isEven that takes in a number as a parameter and returns the string "Even" if the number is even, and "Odd" if the number is odd. Use a ternary operator instead of an if/else statement.

Solution of Exercise 4:

function isEven(number) {
    return number % 2 === 0 ? "Even" : "Odd";
  }
  
  const age = 43;
  const anotherAge = 34;
  
  const myAge = isEven(age);
  const herAge = isEven(anotherAge); 
  
  console.log(`My age is ${myAge}.`); 
  console.log(`Her age is ${herAge}.`); 

//====== Result in Terminal:
//My age is Odd.
//Her age is Even.
//=====================================================================================
 

Exercise 5: 

Convert the following function to an arrow function:
function multiply(a, b) { return a * b; }

Solution of Exercise 5: 

const multiply = (a, b) => a * b;

//Solution with an example:

const multiply = (a, b) => a * b;

const result = multiply( 4 ,5 )
console.log("4 x 5 = " + result)

//====== Result in Terminal:
//4 x 5 = 20
//=====================================================================================

Exercise 6: 
Write a function named getLargestNumber that takes in two numbers as parameters. The function should return the larger number using short-circuiting and logical operators (&&, ||, ??).

Solution of Exercise 6:

function getLargestNumber( a, b ) {
    return a > b ? a : b;
  }
  
  const num1 = 12;
  const num2 = 8;
  const largestNumber = getLargestNumber( num1, num2 );
  
  console.log ( `The largest number between ${num1} and ${num2} is: ${largestNumber}`)
  console.log ( getLargestNumber( 12 , 20) )
  console.log ( getLargestNumber(100,200) )

//====== Result in Terminal:
//The largest number between 12 and 8 is: 12
//20
//200
//=====================================================================================

Exercise 7: 
Write a function named getAddressCity that takes in an object representing a person's address. The address object has properties 'street', 'city', and 'country'. The function should return the value of the 'city' property if it exists, or the string "Unknown" if it doesn't exist, using optional chaining.

Solution of Exercise 7:

function getAddressCity(address) {
    return address ?. city || "Unknown";
  }
  
  const address1 = {
    street: "Dhaka Aricha Road",
    city: "Savar",
    country: "Bangladesh"
  };
   
  const address2 = {
    street: "456 Elm Street",
    country: "Canada"
  };
 
 console.log("City of Address-1 is " + getAddressCity(address1));
 console.log("City of Address-2 is " + getAddressCity(address2)); 

//====== Result in Terminal:
//City of Address-1 is Savar
//City of Address-2 is Unknown
//=====================================================================================

Exercise 8: 
Write a function named doubleNumbers that takes in an array of numbers and returns a new array with each number doubled using the array map method.

Solution of Exercise 8:

function doubleNumbers(numArr) {
    return numArr.map(number => number * 2);
  }
  
  const numArr = [1, 2, 3, 4, 5];
  const result = doubleNumbers(numArr);
  console.log(result);

//====== Result in Terminal:
//[ 2, 4, 6, 8, 10 ]
//=====================================================================================
 
Exercise 9: 
Write a function named filterEvenNumbers that takes in an array of numbers and returns a new array with only the even numbers using the array filter method.

Solution of Exercise 9:

function filterEvenNumbers(numbers) {
    return numbers.filter(number => number % 2 === 0);
  }
  
  const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
  const evenNumbers = filterEvenNumbers(numbers);
  console.log(evenNumbers);

//====== Result in Terminal:
//[ 2, 4, 6, 8, 10, 12 ]
//=====================================================================================

Exercise 10: 
Write a function named sumArray that takes in an array of numbers and returns the sum of all the numbers using the array reduce method.
Solution of Exercise 10:

function sumArray(numArr) {
    return numArr.reduce((sum, number) => sum + number , 0);
  }
  
  const numArr = [1, 2, 3];
  const sum = sumArray(numArr);
  console.log("Sum of 1, 2, 3 = " + sum);

//====== Result in Terminal:
//Sum of 1, 2, 3 = 6
//=====================================================================================

Exercise 11: 
Write a function named sortNumbers that takes in an array of numbers and returns a new array with the numbers sorted in ascending order using the array sort method.

Solution of Exercise 11:

function sortNumbers(numbers) {
    return numbers.slice().sort((a, b) => a - b);
  }
  
  const numbers = [35, 20, 70, 80, 65, 55];
  const sortedNumbers = sortNumbers(numbers);
  console.log(sortedNumbers);

//====== Result in Terminal:
//[ 20, 35, 55, 65, 70, 80 ]
//=====================================================================================
